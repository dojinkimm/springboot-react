{"version":3,"sources":["components/Navbar.js","actions/ToDoActions.js","actions/types.js","components/ToDos/ToDoItem.js","components/TodoDashboard.js","components/ToDos/AddToDo.js","components/ToDos/UpdateToDo.js","reducers/errorsReducer.js","reducers/todoReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","addToDo","todo","history","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","axios","post","push","type","payload","t0","response","data","stop","_x","apply","this","arguments","ToDoItem","id","props","deleteToDo","priority","title","content","concat","style","marginLeft","onClick","onDeleteClick","bind","duedate","Component","connect","_ref3","_callee3","_context3","window","confirm","delete","_x3","TodoDashboard","getBacklog","dashBoard","displayWarning","todo_list","todoItems","completeItems","overTimeItems","tasks","map","ToDos_ToDoItem","key","date","dateFormat","Date","toString","i","length","completed","Fragment","padding","marginTop","marginBottom","marginRight","dashboardCalculate","overStrings","countOverTimeItems","state","_ref2","_callee2","res","_context2","get","sent","_x2","AddToDo","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","errors","handleChange","assertThisInitialized","onSubmit","setState","e","includes","defineProperty","target","name","value","preventDefault","d","newToDo","htmlFor","classnames","is-invalid","placeholder","onChange","react_datepicker_es","selected","UpdateToDo","_next$todo","match","params","getToDoItem","newUpdatedToDo","summary","_ref4","_callee4","_context4","_x4","initialState","combineReducers","undefined","action","objectSpread","filter","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","createStore","rootReducer","compose","applyMiddleware","App","es","components_Navbar","react_router","exact","path","component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c71091c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  //맨 위에 있는 네비게이션 바\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          To Do 리스트\n        </Link>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import axios from 'axios'\nimport {ERRORS, GET_TODO_LIST,DELETE_TODO,GET_TODO_ITEM} from \"./types\";\n\n\nexport const addToDo = (todo, history) => async dispatch =>{\n    try{\n        await axios.post(\"/api/todo\", todo);\n        history.push(\"/\"); \n        dispatch({ //잘 추가 됬으면 이젠에 에러가 있는 부분 없어져야 한다\n            type: ERRORS,\n            payload: {}\n        });\n    }catch (error){ //오류가 생기면 에러를 보여준다\n        dispatch({\n            type: ERRORS,\n            payload: error.response.data\n        });\n    }\n};\n\nexport const getBacklog= () => async dispatch =>{ //모든 todo 리스트를 가지고 온다\n    const res = await axios.get(\"/api/todo/getall\");\n    dispatch({\n        type: GET_TODO_LIST,\n        payload:res.data\n    });\n};\n\nexport const deleteToDo = id => async dispatch =>{ //현재 누른 todo를 삭제한다\n    if(window.confirm(`확인을 누르면 삭제됩니다. 삭제하시겠습니까?`)){ //삭제를 하기 전에 알림창으로 물어본다, 확인을 누르면 삭제한다\n        await axios.delete(`/api/todo/${id}`);\n        dispatch({\n            type: DELETE_TODO,\n            payload: id\n        });\n    }\n};\n\n\nexport const getToDoItem = (id, history) => async dispatch =>{ //수정을 할 때 해장 todo의 내용 가지고 오기 위함이다\n    try{\n        const res = await axios.get(`/api/todo/${id}`);\n        dispatch({\n            type: GET_TODO_ITEM,\n            payload: res.data\n        });\n    }catch(error){\n        history.push(\"/\");\n    }\n};\n","export const ERRORS = \"ERRPRS\";\nexport const GET_TODO_LIST= \"GET_TODO_LIST\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const GET_TODO_ITEM = \"GET_TODO_ITEM\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteToDo } from \"../../actions/ToDoActions\";\n\n//각각 카드의 내용을 담은 클래스이다\nclass ToDoItem extends Component {\n  onDeleteClick(id) {\n    this.props.deleteToDo(id);\n  }\n\n  render() {\n    const { todo } = this.props; //parent component에서 가지고 왔다\n    return (\n      <div className=\"card mb-3\">\n        <div className=\"row no-gutters\">\n          {\n            //priority 3이면 상, 2이면 중, 1이면 하를 표시하고 색상은 상 빨강, 중 노랑, 하 초록으로 표시한다\n          }\n          <div\n            className={\n              todo.priority === 3\n                ? \"col-md-1 bg-danger\"\n                : todo.priority === 2\n                ? \"col-md-1 bg-warning\"\n                : \"col-md-1 bg-success\"\n            }\n          >\n            <p className=\"text-center text-white font-weight-bold\">\n              {todo.priority === 3 ? \"상\" : todo.priority === 2 ? \"중\" : \"하\"}\n            </p>\n          </div>\n          <div className=\"col-md-8\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{todo.title}</h5>\n              <p className=\"card-text text-muted\">{todo.content}</p>\n              <Link to={`updateToDo/${todo.id}`} className=\"card-link\">\n                수정\n              </Link>\n\n              {\n                //삭제버튼을 누르면 해당 아이템의 아이디를 알려주고 아이디로 삭제를 한다\n              }\n              <button\n                style ={{marginLeft:\"20px\"}}\n                className=\"btn btn-outline-danger\"\n                onClick={this.onDeleteClick.bind(this, todo.id)}\n              >\n                삭제\n              </button>\n            </div>\n          </div>\n          <div className=\"card-header col\">\n            {\" \"}\n            <p className=\"card-text  text-center\">\n              <small className=\"text-muted\">\n                마감기한\n                <br />\n                {todo.duedate === null ? \"no due date\" : todo.duedate}\n              </small>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nToDoItem.propTypes = {\n  deleteToDo: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { deleteToDo }\n)(ToDoItem);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ToDoItem from \"./ToDos/ToDoItem\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../actions/ToDoActions\";\nimport dateFormat from \"dateformat\";\n\nclass TodoDashboard extends Component {\n  componentDidMount() {\n    //전체 리스트를 가지고 온다\n    this.props.getBacklog();\n  }\n\n  render() {\n    const { todo_list } = this.props.todo_list;\n\n    let dashBoard;\n    let todoItems = []; //todo 인 아이템 개수\n    let completeItems = []; //complete인 아이템 개수\n    let overTimeItems = []; //마감기한 지난 아이템 개수\n\n    const dashboardCalculate = todo_list => {\n      const tasks = todo_list.map(todo => (\n        <ToDoItem key={todo.id} todo={todo} />\n      ));\n      let date = dateFormat(new Date(), \"yyyy.mm.dd\").toString(); //현재 날짜를 파싱해서 마김기한이 지났는지 비교한다\n      for (let i = 0; i < tasks.length; i++) {\n        if (tasks[i].props.todo.completed === \"TODO\") {\n          //props에 내 일이 todo 형태인지 확인\n          todoItems.push(tasks[i]);\n          if ( tasks[i].props.todo.duedate < date && tasks[i].props.todo.duedate !== null) { //현재진행중으로 분류된 아이템 중에 마감기한 지난 걸 찾는다\n            overTimeItems.push(tasks[i]);\n          }\n        } else if (tasks[i].props.todo.completed === \"COMPLETED\") {\n          //props에 내 일이 completed 형태인지 확인\n          completeItems.push(tasks[i]);\n        }\n      }\n\n      //카드 형식 나오는 부분을 보여주는 코드이다\n      return (\n        <React.Fragment>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <div className=\"card text-center\">\n                  <div className=\"bg-light\" style={{ padding: \"20px\" }}>\n                    <h3>TO DO</h3>\n                  </div>\n                </div>\n                {\n                  // 파란색으로 todo 아이템을 추가하는 부분\n                }\n                <Link to=\"/addToDo\">\n                  <button\n                    className=\"col-12 btn btn-primary\"\n                    style={{ marginTop: \"10px\", marginBottom: \"10px\" }}\n                  >\n                    <i\n                      className=\"fas fa-plus\"\n                      style={{ marginRight: \"15px\" }}\n                    />\n                    To Do 추가하기\n                  </button>\n                </Link>\n                {\n                  // 진행중인 todo 보여주는 리스트\n                }\n                {todoItems}\n              </div>\n              <div className=\"col-6\">\n                <div className=\"card text-center\">\n                  <div\n                    className=\"bg-dark text-white\"\n                    style={{ padding: \"20px\" }}\n                  >\n                    <h3>COMPLETED</h3>\n                  </div>\n                </div>\n                {\n                  // 완료된 todo 보여주는 리스트\n                }\n                {completeItems}\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    };\n    dashBoard = dashboardCalculate(todo_list);\n\n    //만약 todo인데 마감기한이 지났으면 warning 화면을 보여준다\n    let displayWarning;\n    const countOverTimeItems = overTimeItems => {\n      if (overTimeItems.length > 0) {\n        let overStrings = \"\";\n        for (let i = 0; i < overTimeItems.length; i++) {\n          if(i!=overTimeItems.length-1){\n            overStrings += overTimeItems[i].props.todo.title+\", \";\n          }else{\n            overStrings += overTimeItems[i].props.todo.title;\n          }\n        }\n        return (\n          <React.Fragment>\n            <div className=\"alert alert-danger\">\n              <strong>>{overStrings} <br/>해당 제목을 가진 TODO가 마감기한을 넘었습니다</strong>\n            </div>\n          </React.Fragment>\n        );\n      }\n    };\n    displayWarning = countOverTimeItems(overTimeItems);\n\n    return (\n      <div className=\"container\" style={{ padding: \"20px\" }}>\n        {displayWarning}\n        <br />\n\n        {dashBoard}\n      </div>\n    );\n  }\n}\n\nTodoDashboard.propTypes = {\n  getBacklog: PropTypes.func.isRequired,\n  todo_list: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todo_list: state.todo\n});\n\nexport default connect(\n  mapStateToProps,\n  { getBacklog }\n)(TodoDashboard);\n","import React, { Component } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport classnames from \"classnames\";\nimport PropTypes  from \"prop-types\"\nimport {connect} from \"react-redux\";\nimport {addToDo} from \"../../actions/ToDoActions\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport dateFormat from 'dateformat';\n\nclass AddToDo extends Component {\n  constructor() {\n    //처음에 초기화하는 것이기 때문에 모든 값들이 \"\" 형태이다\n    super();\n    this.state = {\n      title: \"\",\n      content: \"\",\n      priority: \"1\",\n      completed: \"\",\n      duedate: \"\",\n      errors: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(next) {\n    //props를 받고 에러가 생기면 errors에 에러 문구를 담아준다\n    if(next.errors){\n        this.setState({errors:next.errors});\n    }\n  }\n\n  //form에서 변화가 일어나면 name에 해당하는 곳은 해당 value를 넣어준다\n  handleChange(e) {\n    //꼼수긴 하지만 현재 들어온 값이 날짜라면 다른 방식으로 onchange를 적용한다\n    if (e.toString().includes(\"GMT\") && e.toString().includes(\"2019\")) {\n      this.setState({\n        duedate: e\n      });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  }\n\n  onSubmit(e){\n      e.preventDefault(); //default였던 값들 들어가지 않도록 한다\n      var d = dateFormat(this.state.duedate, \"yyyy.mm.dd\").toString(); //string으로 변환후에 넣어준다\n      const newToDo = {\n        title: this.state.title,\n        content: this.state.content,\n        priority: this.state.priority,\n        completed: this.state.completed,\n        duedate: d\n      };\n      this.props.addToDo(newToDo,this.props.history);\n  }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"container\" style={{ padding: \"20px\" }}>\n          <div className=\"m-auto\">\n            <h1 className=\"text-center\">To Do 추가하기</h1>\n            <form onSubmit={this.onSubmit}>\n              {\n                //제목 작성하는 칸\n              }\n              <div className=\"form-group\">\n                <label htmlFor=\"titleInput\">To Do 제목<small className=\"text-danger\">    *필수항목</small></label>\n                <input\n                  type=\"text\"\n                  id=\"titleInput\"\n                  className={classnames(\"form-control\", {\n                      \"is-invalid\": errors.title\n                  })}\n                  name=\"title\"\n                  placeholder=\"ToDo의 제목을 작성해주세요\"\n                  value={this.state.title}\n                  onChange={this.handleChange}\n                />\n                {\n                    errors.title && ( <div className=\"invalid-feedback\">{errors.title}</div>)\n                }\n              </div>\n              {\n                // 내용 작성하는 칸\n              }\n              <div className=\"form-group\">\n                <label htmlFor=\"contentInput\">To Do 내용</label>\n                <textarea\n                  id=\"contentInput\"\n                  className=\"form-control\"\n                  placeholder=\"ToDo의 내용을 적어주세요\"\n                  name=\"content\"\n                  value={this.state.content}\n                  onChange={this.handleChange}\n                />\n              </div>\n              <div className=\"form-row justify-content-between\">\n                {\n                  // 우선순위 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"priorityInput\">우선순위 (상-중-하)</label>\n                  <select\n                    id=\"priorityInput\"\n                    className=\"form-control\"\n                    name=\"priority\"\n                    value={this.state.priority}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"3\">HIGH</option>\n                    <option value=\"2\">MEDIUM</option>\n                    <option value=\"1\">LOW</option>\n                  </select>\n                </div>\n                {\n                  // 상태 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"completedInput\">TODO / COMPLETED</label>\n                  <select\n                    id=\"completedInput\"\n                    className=\"form-control\"\n                    name=\"completed\"\n                    value={this.state.completed}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"\">Status</option>\n                    <option value=\"TODO\">TO DO</option>\n                    <option value=\"COMPLETED\">COMPLETED</option>\n                  </select>\n                </div>\n                {\n                  // 마감 기한 정하는 칸\n                }\n                <div className=\"form-group col\">\n                  <label htmlFor=\"duedateInput\">마감기한</label>\n                  <br />\n                  <DatePicker\n                    id=\"duedateInput\"\n                    name=\"duedate\"\n                    selected={this.state.duedate}\n                    onChange={this.handleChange.bind(this)}\n                  />\n                </div>\n              </div>\n              <input type=\"submit\" className=\"btn btn-secondary btn-block\" />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAddToDo.propTypes = {\n    addToDo: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, {addToDo}) (AddToDo);\n","import React, { Component } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport classnames from \"classnames\";\nimport PropTypes  from \"prop-types\"\nimport {connect} from \"react-redux\";\nimport {addToDo, getToDoItem} from \"../../actions/ToDoActions\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport dateFormat from 'dateformat';\n\nclass UpdateToDo extends Component {\n  constructor() {\n    //처음에 초기화하는 것이기 때문에 모든 값들이 \"\" 형태이다\n    super();\n    this.state = {\n      title: \"\",\n      content: \"\",\n      priority: \"\",\n      completed: \"\",\n      duedate: \"\",\n      errors: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(next) {\n    //props를 받고 에러가 생기면 errors에 에러 문구를 담아준다\n    if(next.errors){\n        this.setState({errors:next.errors});\n    }\n    // duedate는 string 형태인데 datepicker에서 가지고 오는 것은 datetime 형식이다\n    // 둘이 호환이 안되기 때문에 여기서 duetime의 내용은 가지고 오지 않는다\n    const { id, title, content, priority, completed } = next.todo; \n\n    this.setState({\n      id,title, content, priority, completed});\n  }\n\n  //form에서 변화가 일어나면 name에 해당하는 곳은 해당 value를 넣어준다\n  handleChange(e) {\n    //꼼수긴 하지만 현재 들어온 값이 날짜라면 다른 방식으로 onchange를 적용한다\n    if (e.toString().includes(\"GMT\") && e.toString().includes(\"2019\")) {\n      this.setState({\n        duedate: e\n      });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.props.getToDoItem(id);\n  }\n\n  onSubmit(e){\n      e.preventDefault(); //default였던 값들 들어가지 않도록 한다\n      var d = dateFormat(this.state.duedate, \"yyyy.mm.dd\").toString();//string으로 변환후에 넣어준다\n      const newUpdatedToDo = {\n          id: this.state.id,\n        title: this.state.title,\n        content: this.state.content,\n        priority: this.state.priority,\n        completed: this.state.completed,\n        duedate: d\n      };\n      this.props.addToDo(newUpdatedToDo,this.props.history);\n  }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"container\" style={{ padding: \"20px\" }}>\n          <div className=\"m-auto\">\n            <h1 className=\"text-center\">To Do 수정하기</h1>\n            <form onSubmit={this.onSubmit}>\n              {\n                //제목 작성하는 칸\n              }\n              <div className=\"form-group\">\n              <label htmlFor=\"titleInput\">To Do 제목</label>\n                <input\n                  type=\"text\"\n                  id=\"titleInput\"\n                  className={classnames(\"form-control\", {\n                      \"is-invalid\": errors.summary\n                  })}\n                  name=\"title\"\n                  placeholder=\"ToDo의 제목을 작성해주세요\"\n                  value={this.state.title}\n                  onChange={this.handleChange}\n                />\n                {\n                    errors.summary && ( <div className=\"invalid-feedback\">{errors.summary}</div>)\n                }\n              </div>\n              {\n                // 내용 작성하는 칸\n              }\n              <div className=\"form-group\">\n              <label htmlFor=\"contentInput\">To Do 내용</label>\n                <textarea\n                  id=\"contentInput\"\n                  className=\"form-control\"\n                  placeholder=\"ToDo의 내용을 적어주세요\"\n                  name=\"content\"\n                  value={this.state.content}\n                  onChange={this.handleChange}\n                />\n              </div>\n              <div className=\"form-row justify-content-between\">\n                {\n                  // 우선순위 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                <label htmlFor=\"priorityInput\">우선순위 (상-중-하)</label>\n                  <select\n                    id=\"priorityInput\"\n                    className=\"form-control\"\n                    name=\"priority\"\n                    value={this.state.priority}\n                    onChange={this.handleChange}\n                  >\n                  <option value=\"3\">HIGH</option>\n                  <option value=\"2\">MEDIUM</option>\n                  <option value=\"1\">LOW</option>\n                  </select>\n                </div>\n                {\n                  // 상태 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"completedInput\">TODO / COMPLETED</label>\n                  <select\n                    id=\"completedInput\"\n                    className=\"form-control\"\n                    name=\"completed\"\n                    value={this.state.completed}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"\">Status</option>\n                    <option value=\"TODO\">TO DO</option>\n                    <option value=\"COMPLETED\">COMPLETED</option>\n                  </select>\n                </div>\n                {\n                  // 마감 기한 정하는 칸\n                  // update부분은 기존의 duedate값이 string이기 때문에 datepicker랑 호환이 안된다\n                  // 그렇게 때문에 update하러 오면 날짜도 다시 지정해야 하는 아쉬움이 있다.\n                }\n                <div className=\"form-group col\">\n                  <label htmlFor=\"duedateInput\">마감기한</label> <span className=\"text-danger\">(날짜를 다시 선택해주세요)</span>\n                  <br />\n                  <DatePicker\n                    id=\"duedateInput\"\n                    name=\"duedate\"\n                    selected={this.state.duedate}\n                    onChange={this.handleChange.bind(this)}\n                  />\n                </div>\n              </div>\n              <input type=\"submit\" className=\"btn btn-secondary btn-block\" />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nUpdateToDo.propTypes = {\n    todo: PropTypes.object.isRequired,\n    addToDo: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    getToDoItem: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    todo: state.todo.todo,\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, {getToDoItem, addToDo}) (UpdateToDo);\n","import {ERRORS} from \"../actions/types\"\n\nconst initialState = {};\n\nexport default function(state=initialState, action){\n    switch(action.type){\n        case ERRORS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import {GET_TODO_LIST,DELETE_TODO,GET_TODO_ITEM} from \"../actions/types\";\n\nconst initialState = {\n    todo_list: [],\n    todo: {}\n}\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n      case GET_TODO_LIST:\n        return {\n          ...state,\n          todo_list: action.payload\n        };\n      case GET_TODO_ITEM:\n        return {\n            ...state,\n            todo: action.payload\n        };\n      case DELETE_TODO:\n          return {\n              ...state,\n              todo_list: state.todo_list.filter(\n                  todo => todo.id !== action.payload\n              )\n          };\n      default:\n        return state\n    }\n  }\n","import {combineReducers} from \"redux\";\nimport errorsReducer from \"./errorsReducer\";\nimport todoReducer from \"./todoReducer\";\n\nexport default combineReducers ({\n    //모든 reducer 여기서 만나야 한다\n    errors: errorsReducer,\n    todo: todoReducer\n});","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\"; \n\nconst initialState = {};\nconst middleware = [thunk]\n\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\nlet store;\n\nif(window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools){\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware), ReactReduxDevTools)\n    );\n}else{\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware))\n    );\n}\n\nexport default store;","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Navbar from './components/Navbar';\nimport \"./App.css\";\nimport TodoDashboard from './components/TodoDashboard';\nimport AddToDo from \"./components/ToDos/AddToDo\"; \nimport UpdateToDo from \"./components/ToDos/UpdateToDo\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport {Provider} from \"react-redux\"\nimport store from \"./store\"\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Route exact path=\"/\" component={TodoDashboard} />\n        <Route exact path=\"/addToDo\" component={AddToDo} />\n        <Route exact path=\"/updateToDo/:id\" component={UpdateToDo}/>\n      </div>\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}