{"version":3,"sources":["components/Navbar.js","actions/ToDoActions.js","actions/types.js","components/ToDos/ToDoItem.js","components/TodoDashboard.js","components/ToDos/AddToDo.js","components/ToDos/UpdateToDo.js","reducers/errorsReducer.js","reducers/todoReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","addToDo","todo","history","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","axios","post","push","type","payload","t0","response","data","stop","_x","apply","this","arguments","ToDoItem","id","props","deleteToDo","priority","title","content","concat","onClick","onDeleteClick","bind","duedate","Component","connect","_ref3","_callee3","_context3","window","confirm","delete","_x3","TodoDashboard","getBacklog","dashBoard","displayWarning","todo_list","todoItems","completeItems","overTimeItems","tasks","map","ToDos_ToDoItem","key","date","dateFormat","Date","toString","i","length","completed","Fragment","style","padding","marginTop","marginBottom","marginRight","dashboardCalculate","overStrings","countOverTimeItems","state","_ref2","_callee2","res","_context2","get","sent","_x2","AddToDo","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","errors","handleChange","assertThisInitialized","onSubmit","setState","e","includes","defineProperty","target","name","value","preventDefault","d","newToDo","htmlFor","classnames","is-invalid","placeholder","onChange","react_datepicker_es","selected","UpdateToDo","_next$todo","match","params","getToDoItem","newUpdatedToDo","summary","_ref4","_callee4","_context4","_x4","initialState","combineReducers","undefined","action","objectSpread","filter","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","createStore","rootReducer","compose","applyMiddleware","App","es","components_Navbar","react_router","exact","path","component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAaeA,EAVA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,eAAeE,GAAG,KAAlC,kHCFKC,EAAU,SAACC,EAAMC,GAAP,sBAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAX,EAAAY,KAAmB,SAAAC,EAAMC,GAAN,OAAAH,EAAAX,EAAAe,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE5BC,IAAMC,KAAK,YAAad,GAFI,OAGlCC,EAAQc,KAAK,KAEbP,EAAS,CACLQ,KCVU,SDWVC,QAAS,KAPqBP,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAUlCF,EAAS,CACLQ,KCfU,SDgBVC,QAASP,EAAAQ,GAAMC,SAASC,OAZM,yBAAAV,EAAAW,SAAAd,EAAA,iBAAnB,gBAAAe,GAAA,OAAApB,EAAAqB,MAAAC,KAAAC,YAAA,IEIjBC,wLACUC,GACZH,KAAKI,MAAMC,WAAWF,oCAGf,IACC3B,EAASwB,KAAKI,MAAd5B,KACR,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAIbH,EAAAC,EAAAC,cAAA,OACEC,UACoB,IAAlBI,EAAK8B,SACD,qBACkB,IAAlB9B,EAAK8B,SACL,sBACA,uBAGNrC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2CACQ,IAAlBI,EAAK8B,SAAiB,SAAwB,IAAlB9B,EAAK8B,SAAiB,SAAM,WAG7DrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcI,EAAK+B,OACjCtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaI,EAAKgC,SAC/BvC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,cAAAmC,OAAgBjC,EAAK2B,IAAM/B,UAAU,aAA7C,UAIAH,EAAAC,EAAAC,cAAA,UACEC,UAAU,8BACVsC,QAASV,KAAKW,cAAcC,KAAKZ,KAAMxB,EAAK2B,KAF9C,YAQJlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZ,IACDH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACG,OAAjBI,EAAKqC,QAAmB,cAAgBrC,EAAKqC,oBA9CvCC,aA2DRC,cACb,KACA,CAAEV,WFxCsB,SAAAF,GAAE,sBAAAa,EAAArC,OAAAC,EAAA,EAAAD,CAAAE,EAAAX,EAAAY,KAAI,SAAAmC,EAAMjC,GAAN,OAAAH,EAAAX,EAAAe,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,WACzB+B,OAAOC,QAAP,8CADyB,CAAAF,EAAA9B,KAAA,eAAA8B,EAAA9B,KAAA,EAElBC,IAAMgC,OAAN,aAAAZ,OAA0BN,IAFR,OAGxBnB,EAAS,CACLQ,KC/Be,cDgCfC,QAASU,IALW,wBAAAe,EAAArB,SAAAoB,MAAJ,gBAAAK,GAAA,OAAAN,EAAAjB,MAAAC,KAAAC,YAAA,KEsCbc,CAGbb,oBC9DIqB,8LAGFvB,KAAKI,MAAMoB,8CAGJ,IAGHC,EAkEAC,EApEIC,EAAc3B,KAAKI,MAAMuB,UAAzBA,UAGJC,EAAY,GACZC,EAAgB,GAChBC,EAAgB,GA6DpBL,EA3D2B,SAAAE,GAKzB,IAJA,IAAMI,EAAQJ,EAAUK,IAAI,SAAAxD,GAAI,OAC9BP,EAAAC,EAAAC,cAAC8D,EAAD,CAAUC,IAAK1D,EAAK2B,GAAI3B,KAAMA,MAE5B2D,EAAOC,IAAW,IAAIC,KAAQ,cAAcC,WACvCC,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IACM,SAAlCR,EAAMQ,GAAGnC,MAAM5B,KAAKiE,WAEtBb,EAAUrC,KAAKwC,EAAMQ,IAChBR,EAAMQ,GAAGnC,MAAM5B,KAAKqC,QAAUsB,GAAwC,OAAhCJ,EAAMQ,GAAGnC,MAAM5B,KAAKqC,SAC7DiB,EAAcvC,KAAKwC,EAAMQ,KAEgB,cAAlCR,EAAMQ,GAAGnC,MAAM5B,KAAKiE,WAE7BZ,EAActC,KAAKwC,EAAMQ,IAK7B,OACEtE,EAAAC,EAAAC,cAACF,EAAAC,EAAMwE,SAAP,KACEzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWuE,MAAO,CAAEC,QAAS,SAC1C3E,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YACPL,EAAAC,EAAAC,cAAA,UACEC,UAAU,yBACVuE,MAAO,CAAEE,UAAW,OAAQC,aAAc,SAE1C7E,EAAAC,EAAAC,cAAA,KACEC,UAAU,cACVuE,MAAO,CAAEI,YAAa,UAN1B,cAWDnB,GAEH3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,qBACVuE,MAAO,CAAEC,QAAS,SAElB3E,EAAAC,EAAAC,cAAA,yBAGH0D,MAODmB,CAAmBrB,GAoB/B,OAFAD,EAf2B,SAAAI,GACzB,GAAIA,EAAcU,OAAS,EAAG,CAE5B,IADA,IAAIS,EAAc,GACTV,EAAI,EAAGA,EAAIT,EAAcU,OAAQD,IACxCU,GAAe,IAAInB,EAAcS,GAAGnC,MAAM5B,KAAK+B,MAEjD,OACEtC,EAAAC,EAAAC,cAACF,EAAAC,EAAMwE,SAAP,KACEzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,kBAAU8E,EAAV,IAAuBhF,EAAAC,EAAAC,cAAA,WAAvB,4HAMO+E,CAAmBpB,GAGlC7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYuE,MAAO,CAAEC,QAAS,SAC1ClB,EACDzD,EAAAC,EAAAC,cAAA,WAECsD,UAlGmBX,aAiHbC,cAJS,SAAAoC,GAAK,MAAK,CAChCxB,UAAWwB,EAAM3E,OAKjB,CAAEgD,WHtGqB,iCAAA4B,EAAAzE,OAAAC,EAAA,EAAAD,CAAAE,EAAAX,EAAAY,KAAM,SAAAuE,EAAMrE,GAAN,IAAAsE,EAAA,OAAAzE,EAAAX,EAAAe,KAAA,SAAAsE,GAAA,cAAAA,EAAApE,KAAAoE,EAAAnE,MAAA,cAAAmE,EAAAnE,KAAA,EACTC,IAAMmE,IAAI,oBADD,OACrBF,EADqBC,EAAAE,KAE3BzE,EAAS,CACLQ,KCvBoB,gBDwBpBC,QAAQ6D,EAAI1D,OAJW,wBAAA2D,EAAA1D,SAAAwD,MAAN,gBAAAK,GAAA,OAAAN,EAAArD,MAAAC,KAAAC,YAAA,KGoGVc,CAGbQ,0CCnHIoC,qBACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAjF,OAAAkF,EAAA,EAAAlF,CAAAqB,KAAA2D,IAEZC,EAAAjF,OAAAmF,EAAA,EAAAnF,CAAAqB,KAAArB,OAAAoF,EAAA,EAAApF,CAAAgF,GAAAK,KAAAhE,QACKmD,MAAQ,CACX5C,MAAO,GACPC,QAAS,GACTF,SAAU,IACVmC,UAAW,GACX5B,QAAS,GACToD,OAAQ,IAEVL,EAAKM,aAAeN,EAAKM,aAAatD,KAAlBjC,OAAAwF,EAAA,EAAAxF,CAAAiF,IACpBA,EAAKQ,SAAWR,EAAKQ,SAASxD,KAAdjC,OAAAwF,EAAA,EAAAxF,CAAAiF,IAZJA,yFAeYxE,GAErBA,EAAK6E,QACJjE,KAAKqE,SAAS,CAACJ,OAAO7E,EAAK6E,8CAKpBK,GAEPA,EAAEhC,WAAWiC,SAAS,QAAUD,EAAEhC,WAAWiC,SAAS,QACxDvE,KAAKqE,SAAS,CACZxD,QAASyD,IAGXtE,KAAKqE,SAAL1F,OAAA6F,EAAA,EAAA7F,CAAA,GAAiB2F,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,yCAIrCL,GACLA,EAAEM,iBACF,IAAIC,EAAIzC,IAAWpC,KAAKmD,MAAMtC,QAAS,cAAcyB,WAC/CwC,EAAU,CACdvE,MAAOP,KAAKmD,MAAM5C,MAClBC,QAASR,KAAKmD,MAAM3C,QACpBF,SAAUN,KAAKmD,MAAM7C,SACrBmC,UAAWzC,KAAKmD,MAAMV,UACtB5B,QAASgE,GAEX7E,KAAKI,MAAM7B,QAAQuG,EAAQ9E,KAAKI,MAAM3B,0CAGjC,IACCwF,EAAWjE,KAAKmD,MAAhBc,OACR,OACEhG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYuE,MAAO,CAAEC,QAAS,SAC3C3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,aACAH,EAAAC,EAAAC,cAAA,QAAMiG,SAAUpE,KAAKoE,UAInBnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,cAAf,eACA9G,EAAAC,EAAAC,cAAA,SACEqB,KAAK,OACLW,GAAG,aACH/B,UAAW4G,IAAW,eAAgB,CAClCC,aAAchB,EAAO1D,QAEzBmE,KAAK,QACLQ,YAAY,cACZP,MAAO3E,KAAKmD,MAAM5C,MAClB4E,SAAUnF,KAAKkE,eAGbD,EAAO1D,OAAWtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoB6F,EAAO1D,QAMlEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,gBAAf,iBACA9G,EAAAC,EAAAC,cAAA,YACEgC,GAAG,eACH/B,UAAU,eACV8G,YAAY,gBACZR,KAAK,UACLC,MAAO3E,KAAKmD,MAAM3C,QAClB2E,SAAUnF,KAAKkE,gBAGnBjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCAIbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,iBAAf,YACA9G,EAAAC,EAAAC,cAAA,UACEgC,GAAG,gBACH/B,UAAU,eACVsG,KAAK,WACLC,MAAO3E,KAAKmD,MAAM7C,SAClB6E,SAAUnF,KAAKkE,cAEfjG,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,QACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,UACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,SAMJ1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,kBAAf,oBACA9G,EAAAC,EAAAC,cAAA,UACEgC,GAAG,iBACH/B,UAAU,eACVsG,KAAK,YACLC,MAAO3E,KAAKmD,MAAMV,UAClB0C,SAAUnF,KAAKkE,cAEfjG,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,IAAd,UACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,QAAd,SACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,aAAd,eAMJ1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,gBAAf,YACA9G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CACEjF,GAAG,eACHuE,KAAK,UACLW,SAAUrF,KAAKmD,MAAMtC,QACrBsE,SAAUnF,KAAKkE,aAAatD,KAAKZ,UAIvC/B,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,SAASpB,UAAU,2CA3IvB0C,cA6JPC,cAJS,SAAAoC,GAAK,MAAK,CAC9Bc,OAAQd,EAAMc,SAGsB,CAAC1F,WAA1BwC,CAAqC4C,GC7J9C2B,cACJ,SAAAA,IAAc,IAAA1B,EAAA,OAAAjF,OAAAkF,EAAA,EAAAlF,CAAAqB,KAAAsF,IAEZ1B,EAAAjF,OAAAmF,EAAA,EAAAnF,CAAAqB,KAAArB,OAAAoF,EAAA,EAAApF,CAAA2G,GAAAtB,KAAAhE,QACKmD,MAAQ,CACX5C,MAAO,GACPC,QAAS,GACTF,SAAU,GACVmC,UAAW,GACX5B,QAAS,GACToD,OAAQ,IAEVL,EAAKM,aAAeN,EAAKM,aAAatD,KAAlBjC,OAAAwF,EAAA,EAAAxF,CAAAiF,IACpBA,EAAKQ,SAAWR,EAAKQ,SAASxD,KAAdjC,OAAAwF,EAAA,EAAAxF,CAAAiF,IAZJA,yFAeYxE,GAErBA,EAAK6E,QACJjE,KAAKqE,SAAS,CAACJ,OAAO7E,EAAK6E,SAHD,IAAAsB,EAKsBnG,EAAKZ,KAAjD2B,EALsBoF,EAKtBpF,GAAII,EALkBgF,EAKlBhF,MAAOC,EALW+E,EAKX/E,QAASF,EALEiF,EAKFjF,SAAUmC,EALR8C,EAKQ9C,UAEtCzC,KAAKqE,SAAS,CACZlE,KAAGI,QAAOC,UAASF,WAAUmC,mDAIpB6B,GAEPA,EAAEhC,WAAWiC,SAAS,QAAUD,EAAEhC,WAAWiC,SAAS,QACxDvE,KAAKqE,SAAS,CACZxD,QAASyD,IAGXtE,KAAKqE,SAAL1F,OAAA6F,EAAA,EAAA7F,CAAA,GAAiB2F,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,oDAI1B,IACVxE,EAAOH,KAAKI,MAAMoF,MAAMC,OAAxBtF,GACRH,KAAKI,MAAMsF,YAAYvF,oCAGhBmE,GACLA,EAAEM,iBACF,IAAIC,EAAIzC,IAAWpC,KAAKmD,MAAMtC,QAAS,cAAcyB,WAC/CqD,EAAiB,CACnBxF,GAAIH,KAAKmD,MAAMhD,GACjBI,MAAOP,KAAKmD,MAAM5C,MAClBC,QAASR,KAAKmD,MAAM3C,QACpBF,SAAUN,KAAKmD,MAAM7C,SACrBmC,UAAWzC,KAAKmD,MAAMV,UACtB5B,QAASgE,GAEX7E,KAAKI,MAAM7B,QAAQoH,EAAe3F,KAAKI,MAAM3B,0CAGxC,IACCwF,EAAWjE,KAAKmD,MAAhBc,OACR,OACEhG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYuE,MAAO,CAAEC,QAAS,SAC3C3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBACAH,EAAAC,EAAAC,cAAA,QAAMiG,SAAUpE,KAAKoE,UAInBnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,cAAf,eACA9G,EAAAC,EAAAC,cAAA,SACEqB,KAAK,OACLW,GAAG,aACH/B,UAAW4G,IAAW,eAAgB,CAClCC,aAAchB,EAAO2B,UAEzBlB,KAAK,QACLQ,YAAY,cACZP,MAAO3E,KAAKmD,MAAM5C,MAClB4E,SAAUnF,KAAKkE,eAGbD,EAAO2B,SAAa3H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoB6F,EAAO2B,UAMpE3H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,gBAAf,iBACA9G,EAAAC,EAAAC,cAAA,YACEgC,GAAG,eACH/B,UAAU,eACV8G,YAAY,gBACZR,KAAK,UACLC,MAAO3E,KAAKmD,MAAM3C,QAClB2E,SAAUnF,KAAKkE,gBAGnBjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCAIbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,iBAAf,YACA9G,EAAAC,EAAAC,cAAA,UACEgC,GAAG,gBACH/B,UAAU,eACVsG,KAAK,WACLC,MAAO3E,KAAKmD,MAAM7C,SAClB6E,SAAUnF,KAAKkE,cAEfjG,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,IAAd,YACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,aACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,QACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,UACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,OACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,cAMJ1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,kBAAf,oBACA9G,EAAAC,EAAAC,cAAA,UACEgC,GAAG,iBACH/B,UAAU,eACVsG,KAAK,YACLC,MAAO3E,KAAKmD,MAAMV,UAClB0C,SAAUnF,KAAKkE,cAEfjG,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,IAAd,UACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,QAAd,SACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,aAAd,eAQJ1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SAAO4G,QAAQ,gBAAf,YADF,IACiD9G,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,0EAC/CH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CACEjF,GAAG,eACHuE,KAAK,UACLW,SAAUrF,KAAKmD,MAAMtC,QACrBsE,SAAUnF,KAAKkE,aAAatD,KAAKZ,UAIvC/B,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,SAASpB,UAAU,2CA1JpB0C,aA+KVC,cALS,SAAAoC,GAAK,MAAK,CAC9B3E,KAAM2E,EAAM3E,KAAKA,KACjByF,OAAQd,EAAMc,SAGsB,CAACyB,YLhJd,SAACvF,EAAI1B,GAAL,sBAAAoH,EAAAlH,OAAAC,EAAA,EAAAD,CAAAE,EAAAX,EAAAY,KAAiB,SAAAgH,EAAM9G,GAAN,IAAAsE,EAAA,OAAAzE,EAAAX,EAAAe,KAAA,SAAA8G,GAAA,cAAAA,EAAA5G,KAAA4G,EAAA3G,MAAA,cAAA2G,EAAA5G,KAAA,EAAA4G,EAAA3G,KAAA,EAElBC,IAAMmE,IAAN,aAAA/C,OAAuBN,IAFL,OAE9BmD,EAF8ByC,EAAAtC,KAGpCzE,EAAS,CACLQ,KCzCiB,gBD0CjBC,QAAS6D,EAAI1D,OALmBmG,EAAA3G,KAAA,gBAAA2G,EAAA5G,KAAA,EAAA4G,EAAArG,GAAAqG,EAAA,SAQpCtH,EAAQc,KAAK,KARuB,yBAAAwG,EAAAlG,SAAAiG,EAAA,iBAAjB,gBAAAE,GAAA,OAAAH,EAAA9F,MAAAC,KAAAC,YAAA,IKgJ2B1B,WAAvCwC,CAAkDuE,2BCtL3DW,EAAe,WCAfA,EAAe,CACjBtE,UAAW,GACXnD,KAAM,ICAK0H,cAAiB,CAE5BjC,OFFW,WAAoC,IAA3Bd,EAA2BlD,UAAAuC,OAAA,QAAA2D,IAAAlG,UAAA,GAAAA,UAAA,GAArBgG,EAAcG,EAAOnG,UAAAuC,OAAA,EAAAvC,UAAA,QAAAkG,EAC/C,OAAOC,EAAO5G,MACV,ILNc,SKOV,OAAO4G,EAAO3G,QAClB,QACI,OAAO0D,IEFf3E,KDAW,WAAuC,IAA9B2E,EAA8BlD,UAAAuC,OAAA,QAAA2D,IAAAlG,UAAA,GAAAA,UAAA,GAAtBgG,EAAcG,EAAQnG,UAAAuC,OAAA,EAAAvC,UAAA,QAAAkG,EAClD,OAAQC,EAAO5G,MACb,INRsB,gBMSpB,OAAOb,OAAA0H,EAAA,EAAA1H,CAAA,GACFwE,EADL,CAEExB,UAAWyE,EAAO3G,UAEtB,INXuB,gBMYrB,OAAOd,OAAA0H,EAAA,EAAA1H,CAAA,GACAwE,EADP,CAEI3E,KAAM4H,EAAO3G,UAEnB,INjBqB,cMkBjB,OAAOd,OAAA0H,EAAA,EAAA1H,CAAA,GACAwE,EADP,CAEIxB,UAAWwB,EAAMxB,UAAU2E,OACvB,SAAA9H,GAAI,OAAIA,EAAK2B,KAAOiG,EAAO3G,YAGvC,QACE,OAAO0D,MEvBT8C,EAAe,GACfM,EAAa,CAACC,KAEdC,EAAqBtF,OAAOuF,8BAAgCvF,OAAOuF,+BAiB1DC,EAdZxF,OAAOyF,UAAUC,UAAUtC,SAAS,WAAakC,EACxCK,YACJC,EACAd,EACAe,YAAQC,IAAelH,WAAf,EAAmBwG,GAAaE,IAGpCK,YACJC,EACAd,EACAe,YAAQC,IAAelH,WAAf,EAAmBwG,KCOpBW,MAff,WACE,OACEjJ,EAAAC,EAAAC,cAACgJ,EAAA,EAAD,CAAUR,MAAOA,GACjB1I,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiJ,EAAD,MACAnJ,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjG,IACjCtD,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAW7D,IACxC1F,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkBC,UAAWlC,QCRnCmC,QACW,cAA7BtG,OAAOuG,SAASC,UAEe,UAA7BxG,OAAOuG,SAASC,UAEhBxG,OAAOuG,SAASC,SAASnC,MACvB,2DCZNoC,IAASC,OAAO5J,EAAAC,EAAAC,cAAC2J,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.37abe32c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          To Do List\n        </Link>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import axios from 'axios'\nimport {ERRORS, GET_TODO_LIST,DELETE_TODO,GET_TODO_ITEM} from \"./types\";\n\n\nexport const addToDo = (todo, history) => async dispatch =>{\n    try{\n        await axios.post(\"/api/todo\", todo);\n        history.push(\"/\"); \n        //다 잘됬으면 에러 사라져야 한다\n        dispatch({\n            type: ERRORS,\n            payload: {}\n        });\n    }catch (error){ //goes badly\n        dispatch({\n            type: ERRORS,\n            payload: error.response.data\n        });\n    }\n};\n\nexport const getBacklog= () => async dispatch =>{\n    const res = await axios.get(\"/api/todo/getall\");\n    dispatch({\n        type: GET_TODO_LIST,\n        payload:res.data\n    });\n};\n\nexport const deleteToDo = id => async dispatch =>{\n    if(window.confirm(`You are TODO, this action cannot be undone`)){\n        await axios.delete(`/api/todo/${id}`);\n        dispatch({\n            type: DELETE_TODO,\n            payload: id\n        });\n    }\n};\n\n\nexport const getToDoItem = (id, history) => async dispatch =>{\n    try{\n        const res = await axios.get(`/api/todo/${id}`);\n        dispatch({\n            type: GET_TODO_ITEM,\n            payload: res.data\n        });\n    }catch(error){\n        history.push(\"/\");\n    }\n};\n","export const ERRORS = \"ERRPRS\";\nexport const GET_TODO_LIST= \"GET_TODO_LIST\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const GET_TODO_ITEM = \"GET_TODO_ITEM\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteToDo } from \"../../actions/ToDoActions\";\n\n\n//각각 카드의 내용을 담은 클래스이다\nclass ToDoItem extends Component {\n  onDeleteClick(id) {\n    this.props.deleteToDo(id);\n  }\n\n  render() {\n    const { todo } = this.props; //parent component에서 가지고 왔다\n    return (\n      <div className=\"card mb-3\">\n        <div className=\"row no-gutters\">\n        {\n          //priority 3이면 상, 2이면 중, 1이면 하를 표시하고 색상은 상 빨강, 중 노랑, 하 초록으로 표시한다\n        }\n          <div\n            className={\n              todo.priority === 3\n                ? \"col-md-1 bg-danger\"\n                : todo.priority === 2\n                ? \"col-md-1 bg-warning\"\n                : \"col-md-1 bg-success\"\n            }\n          >\n            <p className=\"text-center text-white font-weight-bold\">\n              {todo.priority === 3 ? \"상\" : todo.priority === 2 ? \"중\" : \"하\"}\n            </p>\n          </div>\n          <div className=\"col-md-8\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{todo.title}</h5>\n              <p className=\"card-text\">{todo.content}</p>\n              <Link to={`updateToDo/${todo.id}`} className=\"card-link\">\n                Update\n              </Link>\n\n              <button\n                className=\"btn btn-outline-danger ml-4\"\n                onClick={this.onDeleteClick.bind(this, todo.id)}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n          <div className=\"card-header col\">\n            {\" \"}\n            <p className=\"card-text  text-center\">\n              <small className=\"text-muted\">\n                {todo.duedate === null ? \"no due date\" : todo.duedate}\n              </small>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nToDoItem.propTypes = {\n  deleteToDo: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { deleteToDo }\n)(ToDoItem);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ToDoItem from \"./ToDos/ToDoItem\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../actions/ToDoActions\";\nimport dateFormat from \"dateformat\";\n\nclass TodoDashboard extends Component {\n  componentDidMount() {\n    //전체 리스트를 가지고 온다\n    this.props.getBacklog();\n  }\n\n  render() {\n    const { todo_list } = this.props.todo_list;\n\n    let dashBoard;\n    let todoItems = []; //todo 인 아이템 개수\n    let completeItems = []; //complete인 아이템 개수\n    let overTimeItems = []; //마감기한 지난 아이템 개수\n\n    const dashboardCalculate = todo_list => {\n      const tasks = todo_list.map(todo => (\n        <ToDoItem key={todo.id} todo={todo} />\n      ));\n      let date = dateFormat(new Date(), \"yyyy.mm.dd\").toString(); //현재 날짜를 파싱해서 마김기한이 지났는지 비교한다\n      for (let i = 0; i < tasks.length; i++) {\n        if (tasks[i].props.todo.completed === \"TODO\") {\n          //props에 내 일이 todo 형태인지 확인\n          todoItems.push(tasks[i]);\n          if ( tasks[i].props.todo.duedate < date && tasks[i].props.todo.duedate !== null) { //현재진행중으로 분류된 아이템 중에 마감기한 지난 걸 찾는다\n            overTimeItems.push(tasks[i]);\n          }\n        } else if (tasks[i].props.todo.completed === \"COMPLETED\") {\n          //props에 내 일이 completed 형태인지 확인\n          completeItems.push(tasks[i]);\n        }\n      }\n\n      //카드 형식 나오는 부분을 보여주는 코드이다\n      return (\n        <React.Fragment>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <div className=\"card text-center\">\n                  <div className=\"bg-light\" style={{ padding: \"20px\" }}>\n                    <h3>TO DO</h3>\n                  </div>\n                </div>\n                <Link to=\"/addToDo\">\n                  <button\n                    className=\"col-12 btn btn-primary\"\n                    style={{ marginTop: \"10px\", marginBottom: \"10px\" }}\n                  >\n                    <i\n                      className=\"fas fa-plus\"\n                      style={{ marginRight: \"15px\" }}\n                    />\n                    Add To Do\n                  </button>\n                </Link>\n                {todoItems}\n              </div>\n              <div className=\"col-6\">\n                <div className=\"card text-center\">\n                  <div\n                    className=\"bg-dark text-white\"\n                    style={{ padding: \"20px\" }}\n                  >\n                    <h3>COMPLETED</h3>\n                  </div>\n                </div>\n                {completeItems}\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    };\n    dashBoard = dashboardCalculate(todo_list);\n\n    let displayWarning;\n    const countOverTimeItems = overTimeItems => {\n      if (overTimeItems.length > 0) {\n        let overStrings = \"\";\n        for (let i = 0; i < overTimeItems.length; i++) {\n          overStrings += \" \"+overTimeItems[i].props.todo.title;\n        }\n        return (\n          <React.Fragment>\n            <div className=\"alert alert-danger\">\n              <strong>>{overStrings} <br/>해당 제목을 가진 TODO가 마감기한을 넘었습니다</strong>\n            </div>\n          </React.Fragment>\n        );\n      }\n    };\n    displayWarning = countOverTimeItems(overTimeItems);\n\n    return (\n      <div className=\"container\" style={{ padding: \"20px\" }}>\n        {displayWarning}\n        <br />\n\n        {dashBoard}\n      </div>\n    );\n  }\n}\n\nTodoDashboard.propTypes = {\n  getBacklog: PropTypes.func.isRequired,\n  todo_list: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todo_list: state.todo\n});\n\nexport default connect(\n  mapStateToProps,\n  { getBacklog }\n)(TodoDashboard);\n","import React, { Component } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport classnames from \"classnames\";\nimport PropTypes  from \"prop-types\"\nimport {connect} from \"react-redux\";\nimport {addToDo} from \"../../actions/ToDoActions\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport dateFormat from 'dateformat';\n\nclass AddToDo extends Component {\n  constructor() {\n    //처음에 초기화하는 것이기 때문에 모든 값들이 \"\" 형태이다\n    super();\n    this.state = {\n      title: \"\",\n      content: \"\",\n      priority: \"1\",\n      completed: \"\",\n      duedate: \"\",\n      errors: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(next) {\n    //props를 받고 에러가 생기면 errors에 에러 문구를 담아준다\n    if(next.errors){\n        this.setState({errors:next.errors});\n    }\n  }\n\n  //form에서 변화가 일어나면 name에 해당하는 곳은 해당 value를 넣어준다\n  handleChange(e) {\n    //꼼수긴 하지만 현재 들어온 값이 날짜라면 다른 방식으로 onchange를 적용한다\n    if (e.toString().includes(\"GMT\") && e.toString().includes(\"2019\")) {\n      this.setState({\n        duedate: e\n      });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  }\n\n  onSubmit(e){\n      e.preventDefault(); //default였던 값들 들어가지 않도록 한다\n      var d = dateFormat(this.state.duedate, \"yyyy.mm.dd\").toString(); //string으로 변환후에 넣어준다\n      const newToDo = {\n        title: this.state.title,\n        content: this.state.content,\n        priority: this.state.priority,\n        completed: this.state.completed,\n        duedate: d\n      };\n      this.props.addToDo(newToDo,this.props.history);\n  }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"container\" style={{ padding: \"20px\" }}>\n          <div className=\"m-auto\">\n            <h1 className=\"text-center\">Add To Do</h1>\n            <form onSubmit={this.onSubmit}>\n              {\n                //제목 작성하는 칸\n              }\n              <div className=\"form-group\">\n                <label htmlFor=\"titleInput\">To Do Title</label>\n                <input\n                  type=\"text\"\n                  id=\"titleInput\"\n                  className={classnames(\"form-control\", {\n                      \"is-invalid\": errors.title\n                  })}\n                  name=\"title\"\n                  placeholder=\"Enter Title\"\n                  value={this.state.title}\n                  onChange={this.handleChange}\n                />\n                {\n                    errors.title && ( <div className=\"invalid-feedback\">{errors.title}</div>)\n                }\n              </div>\n              {\n                // 내용 작성하는 칸\n              }\n              <div className=\"form-group\">\n                <label htmlFor=\"contentInput\">To Do Content</label>\n                <textarea\n                  id=\"contentInput\"\n                  className=\"form-control\"\n                  placeholder=\"Enter Content\"\n                  name=\"content\"\n                  value={this.state.content}\n                  onChange={this.handleChange}\n                />\n              </div>\n              <div className=\"form-row justify-content-between\">\n                {\n                  // 우선순위 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"priorityInput\">Priority</label>\n                  <select\n                    id=\"priorityInput\"\n                    className=\"form-control\"\n                    name=\"priority\"\n                    value={this.state.priority}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"3\">HIGH</option>\n                    <option value=\"2\">MEDIUM</option>\n                    <option value=\"1\">LOW</option>\n                  </select>\n                </div>\n                {\n                  // 상태 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"completedInput\">TODO / COMPLETED</label>\n                  <select\n                    id=\"completedInput\"\n                    className=\"form-control\"\n                    name=\"completed\"\n                    value={this.state.completed}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"\">Status</option>\n                    <option value=\"TODO\">TO DO</option>\n                    <option value=\"COMPLETED\">COMPLETED</option>\n                  </select>\n                </div>\n                {\n                  // 마감 기한 정하는 칸\n                }\n                <div className=\"form-group col\">\n                  <label htmlFor=\"duedateInput\">Due Date</label>\n                  <br />\n                  <DatePicker\n                    id=\"duedateInput\"\n                    name=\"duedate\"\n                    selected={this.state.duedate}\n                    onChange={this.handleChange.bind(this)}\n                  />\n                </div>\n              </div>\n              <input type=\"submit\" className=\"btn btn-secondary btn-block\" />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAddToDo.propTypes = {\n    addToDo: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, {addToDo}) (AddToDo);\n","import React, { Component } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport classnames from \"classnames\";\nimport PropTypes  from \"prop-types\"\nimport {connect} from \"react-redux\";\nimport {addToDo, getToDoItem} from \"../../actions/ToDoActions\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport dateFormat from 'dateformat';\n\nclass UpdateToDo extends Component {\n  constructor() {\n    //처음에 초기화하는 것이기 때문에 모든 값들이 \"\" 형태이다\n    super();\n    this.state = {\n      title: \"\",\n      content: \"\",\n      priority: \"\",\n      completed: \"\",\n      duedate: \"\",\n      errors: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(next) {\n    //props를 받고 에러가 생기면 errors에 에러 문구를 담아준다\n    if(next.errors){\n        this.setState({errors:next.errors});\n    }\n    const { id, title, content, priority, completed } = next.todo;\n\n    this.setState({\n      id,title, content, priority, completed});\n  }\n\n  //form에서 변화가 일어나면 name에 해당하는 곳은 해당 value를 넣어준다\n  handleChange(e) {\n    //꼼수긴 하지만 현재 들어온 값이 날짜라면 다른 방식으로 onchange를 적용한다\n    if (e.toString().includes(\"GMT\") && e.toString().includes(\"2019\")) {\n      this.setState({\n        duedate: e\n      });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.props.getToDoItem(id);\n  }\n\n  onSubmit(e){\n      e.preventDefault(); //default였던 값들 들어가지 않도록 한다\n      var d = dateFormat(this.state.duedate, \"yyyy.mm.dd\").toString();\n      const newUpdatedToDo = {\n          id: this.state.id,\n        title: this.state.title,\n        content: this.state.content,\n        priority: this.state.priority,\n        completed: this.state.completed,\n        duedate: d\n      };\n      this.props.addToDo(newUpdatedToDo,this.props.history);\n  }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"container\" style={{ padding: \"20px\" }}>\n          <div className=\"m-auto\">\n            <h1 className=\"text-center\">Update To Do</h1>\n            <form onSubmit={this.onSubmit}>\n              {\n                //제목 작성하는 칸\n              }\n              <div className=\"form-group\">\n                <label htmlFor=\"titleInput\">To Do Title</label>\n                <input\n                  type=\"text\"\n                  id=\"titleInput\"\n                  className={classnames(\"form-control\", {\n                      \"is-invalid\": errors.summary\n                  })}\n                  name=\"title\"\n                  placeholder=\"Enter Title\"\n                  value={this.state.title}\n                  onChange={this.handleChange}\n                />\n                {\n                    errors.summary && ( <div className=\"invalid-feedback\">{errors.summary}</div>)\n                }\n              </div>\n              {\n                // 내용 작성하는 칸\n              }\n              <div className=\"form-group\">\n                <label htmlFor=\"contentInput\">To Do Content</label>\n                <textarea\n                  id=\"contentInput\"\n                  className=\"form-control\"\n                  placeholder=\"Enter Content\"\n                  name=\"content\"\n                  value={this.state.content}\n                  onChange={this.handleChange}\n                />\n              </div>\n              <div className=\"form-row justify-content-between\">\n                {\n                  // 우선순위 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"priorityInput\">Priority</label>\n                  <select\n                    id=\"priorityInput\"\n                    className=\"form-control\"\n                    name=\"priority\"\n                    value={this.state.priority}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"\">Priority</option>\n                    <option value=\"5\">VERY HIGH</option>\n                    <option value=\"4\">HIGH</option>\n                    <option value=\"3\">MEDIUM</option>\n                    <option value=\"2\">LOW</option>\n                    <option value=\"1\">VERY LOW</option>\n                  </select>\n                </div>\n                {\n                  // 상태 정하는 칸\n                }\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"completedInput\">TODO / COMPLETED</label>\n                  <select\n                    id=\"completedInput\"\n                    className=\"form-control\"\n                    name=\"completed\"\n                    value={this.state.completed}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"\">Status</option>\n                    <option value=\"TODO\">TO DO</option>\n                    <option value=\"COMPLETED\">COMPLETED</option>\n                  </select>\n                </div>\n                {\n                  // 마감 기한 정하는 칸\n                  // update부분은 기존의 duedate값이 string이기 때문에 datepicker랑 호환이 안된다\n                  // 그렇게 때문에 update하러 오면 날짜도 다시 지정해야 하는 아쉬움이 있다.\n                }\n                <div className=\"form-group col\">\n                  <label htmlFor=\"duedateInput\">Due Date</label> <span className=\"text-danger\">(날짜를 다시 선택해주세요)</span>\n                  <br />\n                  <DatePicker\n                    id=\"duedateInput\"\n                    name=\"duedate\"\n                    selected={this.state.duedate}\n                    onChange={this.handleChange.bind(this)}\n                  />\n                </div>\n              </div>\n              <input type=\"submit\" className=\"btn btn-secondary btn-block\" />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nUpdateToDo.propTypes = {\n    todo: PropTypes.object.isRequired,\n    addToDo: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    getToDoItem: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    todo: state.todo.todo,\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, {getToDoItem, addToDo}) (UpdateToDo);\n","import {ERRORS} from \"../actions/types\"\n\nconst initialState = {};\n\nexport default function(state=initialState, action){\n    switch(action.type){\n        case ERRORS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import {GET_TODO_LIST,DELETE_TODO,GET_TODO_ITEM} from \"../actions/types\";\n\nconst initialState = {\n    todo_list: [],\n    todo: {}\n}\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n      case GET_TODO_LIST:\n        return {\n          ...state,\n          todo_list: action.payload\n        };\n      case GET_TODO_ITEM:\n        return {\n            ...state,\n            todo: action.payload\n        };\n      case DELETE_TODO:\n          return {\n              ...state,\n              todo_list: state.todo_list.filter(\n                  todo => todo.id !== action.payload\n              )\n          };\n      default:\n        return state\n    }\n  }\n","import {combineReducers} from \"redux\";\nimport errorsReducer from \"./errorsReducer\";\nimport todoReducer from \"./todoReducer\";\n\nexport default combineReducers ({\n    //모든 reducer 여기서 만나야 한다\n    errors: errorsReducer,\n    todo: todoReducer\n});","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\"; \n\nconst initialState = {};\nconst middleware = [thunk]\n\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\nlet store;\n\nif(window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools){\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware), ReactReduxDevTools)\n    );\n}else{\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware))\n    );\n}\n\nexport default store;","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Navbar from './components/Navbar';\nimport \"./App.css\";\nimport TodoDashboard from './components/TodoDashboard';\nimport AddToDo from \"./components/ToDos/AddToDo\"; \nimport UpdateToDo from \"./components/ToDos/UpdateToDo\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport {Provider} from \"react-redux\"\nimport store from \"./store\"\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Route exact path=\"/\" component={TodoDashboard} />\n        <Route exact path=\"/addToDo\" component={AddToDo} />\n        <Route exact path=\"/updateToDo/:id\" component={UpdateToDo}/>\n      </div>\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}